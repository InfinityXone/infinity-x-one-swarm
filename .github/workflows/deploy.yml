name: deploy
on:
  push:
    branches: [ "main" ]
  schedule:
    - cron: "17 3 * * *"
permissions:
  id-token: write
  contents: read
jobs:
  cloud-run-deploy:
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      GCP_REGION:     ${{ vars.GCP_REGION }}
      WIF_PROVIDER:   ${{ vars.WIF_PROVIDER }}
      GCP_SA_EMAIL:   ${{ vars.GCP_SA_EMAIL }}
      # Optional: space-separated list of service directories (each must contain a Dockerfile)
      SERVICE_DIRS:   "api harvester injector satellite-consumer"
    steps:
      - uses: actions/checkout@v4

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ env.WIF_PROVIDER }}
          service_account: ${{ env.GCP_SA_EMAIL }}

      - uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker auth
        run: gcloud auth configure-docker "${{ env.GCP_REGION }}-docker.pkg.dev" --quiet

      - name: Ensure Artifact Registry repo
        run: |
          set -e
          REPO="swarm"
          gcloud artifacts repositories describe "$REPO" --location "${{ env.GCP_REGION }}" >/dev/null 2>&1 || \
          gcloud artifacts repositories create "$REPO" --repository-format docker --location "${{ env.GCP_REGION }}" --quiet

      - name: Build & Deploy services found
        shell: bash
        run: |
          set -euo pipefail
          IFS=' ' read -r -a DIRS <<< "${SERVICE_DIRS}"
          for D in "${DIRS[@]}"; do
            [ -d "$D" ] || { echo "[skip] $D does not exist"; continue; }
            [ -f "$D/Dockerfile" ] || { echo "[skip] $D has no Dockerfile"; continue; }
            SVC="${D//_/-}"   # normalize
            IMG="${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/swarm/${SVC}:$GITHUB_SHA"
            echo "[build] $SVC -> $IMG"
            docker build -t "$IMG" "$D"
            docker push "$IMG"

            echo "[deploy] $SVC"
            gcloud run deploy "$SVC" \
              --image "$IMG" \
              --region "${{ env.GCP_REGION }}" \
              --allow-unauthenticated=false \
              --min-instances=0 \
              --max-instances=4 \
              --timeout=300 \
              --cpu=1 \
              --memory=512Mi \
              --set-env-vars=PORT=8080 \
              --quiet

            echo "[traffic->latest] $SVC"
            gcloud run services update-traffic "$SVC" --to-latest --region "${{ env.GCP_REGION }}" --quiet
          done
